{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyOJ9EvA3H3HahubDiDv9130",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/HaJiseon/Data-Analysis-Programming/blob/main/%EC%9D%B8%EA%B3%B5%EC%A7%80%EB%8A%A5%208-puzzle%20%EA%B3%BC%EC%A0%9C\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "OK8N1RXpcSLA",
        "outputId": "de9f7f37-ee05-4eda-a2a7-b38771adde8f"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Solution found:\n",
            "Step 1:\n",
            "[1 2 3]\n",
            "[0 4 6]\n",
            "[7 5 8]\n",
            "------------------\n",
            "Step 2:\n",
            "[1 2 3]\n",
            "[4 0 6]\n",
            "[7 5 8]\n",
            "------------------\n",
            "Step 3:\n",
            "[1 2 3]\n",
            "[4 5 6]\n",
            "[7 0 8]\n",
            "------------------\n",
            "Step 4:\n",
            "[1 2 3]\n",
            "[4 5 6]\n",
            "[7 8 0]\n",
            "------------------\n"
          ]
        }
      ],
      "source": [
        "import numpy as np\n",
        "from heapq import heappush, heappop\n",
        "\n",
        "class PuzzleNode:\n",
        "    def __init__(self, state, parent=None, action=None):\n",
        "        self.state = state\n",
        "        self.parent = parent\n",
        "        self.action = action\n",
        "        self.cost = 0 if parent is None else parent.cost + 1\n",
        "        self.heuristic = self.calculate_heuristic()\n",
        "\n",
        "    def calculate_heuristic(self):\n",
        "        # 휴리스틱 함수를 구현하세요. 예를 들어, 맞지 않은 숫자의 개수 등을 고려할 수 있습니다.\n",
        "        return np.sum(self.state != goal_state)\n",
        "\n",
        "    def __lt__(self, other):\n",
        "        return (self.cost + self.heuristic) < (other.cost + other.heuristic)\n",
        "\n",
        "def get_blank_position(state):\n",
        "    return np.argwhere(state == 0)[0]\n",
        "\n",
        "def get_neighbors(state):\n",
        "    neighbors = []\n",
        "    blank_position = get_blank_position(state)\n",
        "\n",
        "    for action in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n",
        "        neighbor_position = blank_position + action\n",
        "\n",
        "        if 0 <= neighbor_position[0] < 3 and 0 <= neighbor_position[1] < 3:\n",
        "            neighbor = state.copy()\n",
        "            neighbor[blank_position[0], blank_position[1]] = state[neighbor_position[0], neighbor_position[1]]\n",
        "            neighbor[neighbor_position[0], neighbor_position[1]] = 0\n",
        "            neighbors.append(neighbor)\n",
        "\n",
        "    return neighbors\n",
        "\n",
        "def print_puzzle(state):\n",
        "    for row in state:\n",
        "        print(row)\n",
        "    print(\"------------------\")\n",
        "\n",
        "def solve_8_puzzle(initial_state, goal_state):\n",
        "    initial_node = PuzzleNode(initial_state)\n",
        "    goal_node = PuzzleNode(goal_state)\n",
        "\n",
        "    open_set = [initial_node]\n",
        "    closed_set = set()\n",
        "\n",
        "    while open_set:\n",
        "        current_node = heappop(open_set)\n",
        "\n",
        "        if np.array_equal(current_node.state, goal_node.state):\n",
        "            # 탐색 성공\n",
        "            path = []\n",
        "            while current_node:\n",
        "                path.append(current_node.state)\n",
        "                current_node = current_node.parent\n",
        "            return path[::-1]\n",
        "\n",
        "        closed_set.add(tuple(current_node.state.flatten()))\n",
        "\n",
        "        for neighbor_state in get_neighbors(current_node.state):\n",
        "            if tuple(neighbor_state.flatten()) not in closed_set:\n",
        "                neighbor_node = PuzzleNode(neighbor_state, current_node)\n",
        "                if neighbor_node not in open_set:\n",
        "                    heappush(open_set, neighbor_node)\n",
        "\n",
        "    return None\n",
        "\n",
        "# 초기 상태와 목표 상태를 정의합니다.\n",
        "initial_state = np.array([[1, 2, 3], [0, 4, 6], [7, 5, 8]])\n",
        "goal_state = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 0]])\n",
        "\n",
        "# 8-puzzle을 해결합니다.\n",
        "solution_path = solve_8_puzzle(initial_state, goal_state)\n",
        "\n",
        "# 결과를 출력합니다.\n",
        "if solution_path:\n",
        "    print(\"Solution found:\")\n",
        "    for step, state in enumerate(solution_path):\n",
        "        print(f\"Step {step + 1}:\")\n",
        "        print_puzzle(state)\n",
        "else:\n",
        "    print(\"No solution found.\")\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "class State:\n",
        "    def __init__(self, board, goal, depth=0):\n",
        "        self.board = board\n",
        "        self.depth = depth\n",
        "        self.goal = goal\n",
        "\n",
        "    def get_new_board(self, i1, i2, depth):\n",
        "        new_board = self.board[:]\n",
        "        new_board[i1], new_board[i2] = new_board[i2], new_board[i1]\n",
        "        return State(new_board, self.goal, depth)\n",
        "\n",
        "    def expand(self, depth):\n",
        "        result = []\n",
        "        i = self.board.index(0)\n",
        "\n",
        "        if not i in [0, 3, 6]:\n",
        "            result.append(self.get_new_board(i, i-1, depth))\n",
        "        if not i in [0, 1, 2]:\n",
        "            result.append(self.get_new_board(i, i-3, depth))\n",
        "        if not i in [2, 5, 8]:\n",
        "            result.append(self.get_new_board(i, i+1, depth))\n",
        "        if not i in [6, 7, 8]:\n",
        "            result.append(self.get_new_board(i, i+3, depth))\n",
        "        return result\n",
        "\n",
        "    def __str__(self):\n",
        "        return str(self.board[:3]) + \"\\n\" +\\\n",
        "               str(self.board[3:6]) + \"\\n\" +\\\n",
        "               str(self.board[6:]) + \"\\n\" +\\\n",
        "               \"------------------\"\n",
        "\n",
        "    def __eq__(self, other):\n",
        "        return self.board == other.board\n",
        "\n",
        "    def __ne__(self, other):\n",
        "        return self.board != other.board\n",
        "\n",
        "# 초기 상태\n",
        "puzzle = [1, 2, 3,\n",
        "          0, 4, 6,\n",
        "          7, 5, 8]\n",
        "# 목표 상태\n",
        "goal = [1, 2, 3,\n",
        "        4, 5, 6,\n",
        "        7, 8, 0]\n",
        "# open 리스트\n",
        "open_queue = []\n",
        "open_queue.append(State(puzzle, goal))\n",
        "closed_queue = []\n",
        "depth = 0\n",
        "count = 1\n",
        "while len(open_queue) != 0:\n",
        "    current = open_queue.pop(0)\n",
        "    print(count)\n",
        "    count += 1\n",
        "    print(current)\n",
        "\n",
        "    if current.board == goal:\n",
        "        print(\"탐색 성공\")\n",
        "        break\n",
        "\n",
        "    depth = current.depth + 1\n",
        "    closed_queue.append(current)\n",
        "    if depth > 5:\n",
        "        continue\n",
        "\n",
        "    for state in current.expand(depth):\n",
        "        if (state in closed_queue) or (state in open_queue):\n",
        "            continue\n",
        "        else:\n",
        "            open_queue.append(state)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_-4dPJpbeMcB",
        "outputId": "e39bc85d-cf86-4bb7-a47d-e3a335901e62"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1\n",
            "[1, 2, 3]\n",
            "[0, 4, 6]\n",
            "[7, 5, 8]\n",
            "------------------\n",
            "2\n",
            "[0, 2, 3]\n",
            "[1, 4, 6]\n",
            "[7, 5, 8]\n",
            "------------------\n",
            "3\n",
            "[1, 2, 3]\n",
            "[4, 0, 6]\n",
            "[7, 5, 8]\n",
            "------------------\n",
            "4\n",
            "[1, 2, 3]\n",
            "[7, 4, 6]\n",
            "[0, 5, 8]\n",
            "------------------\n",
            "5\n",
            "[2, 0, 3]\n",
            "[1, 4, 6]\n",
            "[7, 5, 8]\n",
            "------------------\n",
            "6\n",
            "[1, 0, 3]\n",
            "[4, 2, 6]\n",
            "[7, 5, 8]\n",
            "------------------\n",
            "7\n",
            "[1, 2, 3]\n",
            "[4, 6, 0]\n",
            "[7, 5, 8]\n",
            "------------------\n",
            "8\n",
            "[1, 2, 3]\n",
            "[4, 5, 6]\n",
            "[7, 0, 8]\n",
            "------------------\n",
            "9\n",
            "[1, 2, 3]\n",
            "[7, 4, 6]\n",
            "[5, 0, 8]\n",
            "------------------\n",
            "10\n",
            "[2, 3, 0]\n",
            "[1, 4, 6]\n",
            "[7, 5, 8]\n",
            "------------------\n",
            "11\n",
            "[2, 4, 3]\n",
            "[1, 0, 6]\n",
            "[7, 5, 8]\n",
            "------------------\n",
            "12\n",
            "[0, 1, 3]\n",
            "[4, 2, 6]\n",
            "[7, 5, 8]\n",
            "------------------\n",
            "13\n",
            "[1, 3, 0]\n",
            "[4, 2, 6]\n",
            "[7, 5, 8]\n",
            "------------------\n",
            "14\n",
            "[1, 2, 0]\n",
            "[4, 6, 3]\n",
            "[7, 5, 8]\n",
            "------------------\n",
            "15\n",
            "[1, 2, 3]\n",
            "[4, 6, 8]\n",
            "[7, 5, 0]\n",
            "------------------\n",
            "16\n",
            "[1, 2, 3]\n",
            "[4, 5, 6]\n",
            "[0, 7, 8]\n",
            "------------------\n",
            "17\n",
            "[1, 2, 3]\n",
            "[4, 5, 6]\n",
            "[7, 8, 0]\n",
            "------------------\n",
            "탐색 성공\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from collections import deque\n",
        "def print_board(board):\n",
        "    for i in range(0, 9, 3):\n",
        "        print(board[i:i+3])\n",
        "    print(\"------------------\")\n",
        "\n",
        "def swap_tiles(board, i, j):\n",
        "    new_board = board[:]\n",
        "    new_board[i], new_board[j] = new_board[j], new_board[i]\n",
        "    return new_board\n",
        "\n",
        "def get_new_boards(board):\n",
        "    new_boards = []\n",
        "    i = board.index(0)\n",
        "    moves = [(0, -1), (-1, 0), (0, 1), (1, 0)]  # LEFT, UP, RIGHT, DOWN\n",
        "\n",
        "    for move in moves:\n",
        "        ni, nj = i // 3 + move[0], i % 3 + move[1]\n",
        "        if 0 <= ni < 3 and 0 <= nj < 3:\n",
        "            new_boards.append(swap_tiles(board, i, ni * 3 + nj))\n",
        "\n",
        "    return new_boards\n",
        "\n",
        "def bfs(start, goal):\n",
        "    open_queue = deque([(start, 0)])  # 각 상태와 해당 상태의 깊이를 함께 저장\n",
        "    closed_set = set()\n",
        "\n",
        "    while open_queue:\n",
        "        current, depth = open_queue.popleft()\n",
        "        print_board(current)\n",
        "\n",
        "        if current == goal:\n",
        "            print(\"탐색 성공\")\n",
        "            return\n",
        "\n",
        "        closed_set.add(tuple(current))  # 상태를 튜플로 변환하여 집합에 추가\n",
        "\n",
        "        if depth > 5:\n",
        "            continue\n",
        "\n",
        "        for new_board in get_new_boards(current):\n",
        "            if tuple(new_board) not in closed_set and new_board not in open_queue:\n",
        "                open_queue.append((new_board, depth + 1))\n",
        "\n",
        "# 초기 상태\n",
        "start_board = [1, 2, 3, 0, 4, 6, 7, 5, 8]\n",
        "# 목표 상태\n",
        "goal_board = [1, 2, 3, 4, 5, 6, 7, 8, 0]\n",
        "\n",
        "bfs(start_board, goal_board)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_g6mMLB7gOUW",
        "outputId": "863f8765-5fdf-49cb-d9b1-e379aabfc94d"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[1, 2, 3]\n",
            "[0, 4, 6]\n",
            "[7, 5, 8]\n",
            "------------------\n",
            "[0, 2, 3]\n",
            "[1, 4, 6]\n",
            "[7, 5, 8]\n",
            "------------------\n",
            "[1, 2, 3]\n",
            "[4, 0, 6]\n",
            "[7, 5, 8]\n",
            "------------------\n",
            "[1, 2, 3]\n",
            "[7, 4, 6]\n",
            "[0, 5, 8]\n",
            "------------------\n",
            "[2, 0, 3]\n",
            "[1, 4, 6]\n",
            "[7, 5, 8]\n",
            "------------------\n",
            "[1, 0, 3]\n",
            "[4, 2, 6]\n",
            "[7, 5, 8]\n",
            "------------------\n",
            "[1, 2, 3]\n",
            "[4, 6, 0]\n",
            "[7, 5, 8]\n",
            "------------------\n",
            "[1, 2, 3]\n",
            "[4, 5, 6]\n",
            "[7, 0, 8]\n",
            "------------------\n",
            "[1, 2, 3]\n",
            "[7, 4, 6]\n",
            "[5, 0, 8]\n",
            "------------------\n",
            "[2, 3, 0]\n",
            "[1, 4, 6]\n",
            "[7, 5, 8]\n",
            "------------------\n",
            "[2, 4, 3]\n",
            "[1, 0, 6]\n",
            "[7, 5, 8]\n",
            "------------------\n",
            "[0, 1, 3]\n",
            "[4, 2, 6]\n",
            "[7, 5, 8]\n",
            "------------------\n",
            "[1, 3, 0]\n",
            "[4, 2, 6]\n",
            "[7, 5, 8]\n",
            "------------------\n",
            "[1, 2, 0]\n",
            "[4, 6, 3]\n",
            "[7, 5, 8]\n",
            "------------------\n",
            "[1, 2, 3]\n",
            "[4, 6, 8]\n",
            "[7, 5, 0]\n",
            "------------------\n",
            "[1, 2, 3]\n",
            "[4, 5, 6]\n",
            "[0, 7, 8]\n",
            "------------------\n",
            "[1, 2, 3]\n",
            "[4, 5, 6]\n",
            "[7, 8, 0]\n",
            "------------------\n",
            "탐색 성공\n"
          ]
        }
      ]
    }
  ]
}